(()=>{"use strict";var n={28:(n,e,t)=>{t.d(e,{Z:()=>a});var r=t(537),o=t.n(r),A=t(645),i=t.n(A)()(o());i.push([n.id,"* {\n    margin: 0;\n    border: 0;\n    padding: 0;\n    box-sizing: border-box;\n    --purple-color: #c084fc;\n    --grey-color: #020617;\n    font-family: 'Roboto', sans-serif;\n}\n\n#container {\n    min-height: 100vh;\n    display: grid;\n    grid-template-rows: auto 1fr;\n    grid-template-rows: auto 1fr;\n}\n\n#main {\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n}\n\n#header {\n    background-color: var(--purple-color);\n    padding: 10px;\n    display: flex;\n    gap: 20px;\n    align-items: center;\n    font-size: 40px;\n    font-weight: 500;\n}\n\n#sidebar {\n    background-color: var(--grey-color);\n    padding: 10px;\n    padding-top: 15px;\n}\n\nul { \n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n}\n\nul > li {\n    list-style-type: none;\n    color: white;\n    font-size: 25px;\n}\n\nli > button {\n    background-color: var(--grey-color);\n    height: 60px;\n    width: 250px;\n    color: white;\n    font-size: 25px;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    cursor: pointer;\n    border-radius: 10px;\n}\n\nbutton:hover {\n    background-color: grey;\n}\n\nbutton > svg {\n    fill: white;\n    height: 50px;\n    width: 50px;\n}\n\n.projects-text {\n    margin-top: 70px;\n    margin-left: 10px;\n}\n\n.two {\n    display: flex;\n    gap: 120px;\n    align-items: center;\n}\n\n#add-project {\n    height: 40px;\n    width: 40px;\n    border-radius: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: var(--grey-color);\n}\n\n#add-project:hover {\n    background-color: grey;\n}\n\n#add-project > svg {\n    height: 30px;\n    width: 30px;\n}\n\nhr {\n    background: white;\n    height: 5px;\n    margin-bottom: 15px;\n}\n\ndialog[open] { \n    height: 250px;\n    width: 400px;\n    margin: auto;\n    border: 5px solid black;\n    padding: 20px;\n    border-radius: 10px;\n}\n\ndialog[open] form {\n    display: flex;\n    flex-direction: column;\n    gap: 25px;\n    align-items: center;\n}\n\ndialog[open] [id=\"project-name\"] {\n    height: 30px;\n    padding: 5px;\n    width: 290px;\n}\n\ndialog[open] #sub-btn {\n    background-color: green;\n    color: white;\n    height: 30px;\n    width: 290px;\n    border-radius: 3px;\n    padding: 5px;\n    border: 1px solid #166534;\n}\n\n\ndialog[open] #cancel-btn {\n    background-color: red;\n    color: white;\n    height: 30px;\n    width: 290px;\n    border-radius: 3px;\n    padding: 5px;\n}\n\n[data-lists] {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    margin: 10px;\n}\n\n[data-lists] > li {\n    list-style-type: none;\n    color: white;\n    font-size: 20px;\n}\n\n\n/* .list-name > button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height:30px;\n    width:30px;\n    border-radius: 50%;\n    font-size: 20px;\n} */\n.list-name {\n    position: relative;\n    display: flex;\n    align-items: center;\n}\n\n.list-name > span {\n    position: absolute;\n    font-size: 24px;\n    cursor: pointer;\n    right: 0;\n}\n\n.active-list {\n    background-color: grey;\n    border-radius: 3px;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,SAAS;IACT,UAAU;IACV,sBAAsB;IACtB,uBAAuB;IACvB,qBAAqB;IACrB,iCAAiC;AACrC;;AAEA;IACI,iBAAiB;IACjB,aAAa;IACb,4BAA4B;IAC5B,4BAA4B;AAChC;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,qCAAqC;IACrC,aAAa;IACb,aAAa;IACb,SAAS;IACT,mBAAmB;IACnB,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,mCAAmC;IACnC,aAAa;IACb,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,qBAAqB;IACrB,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,mCAAmC;IACnC,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,SAAS;IACT,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,UAAU;IACV,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,mCAAmC;AACvC;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,iBAAiB;IACjB,WAAW;IACX,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,YAAY;IACZ,uBAAuB;IACvB,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ,yBAAyB;AAC7B;;;AAGA;IACI,qBAAqB;IACrB,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,YAAY;AAChB;;AAEA;IACI,qBAAqB;IACrB,YAAY;IACZ,eAAe;AACnB;;;AAGA;;;;;;;;GAQG;AACH;IACI,kBAAkB;IAClB,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,eAAe;IACf,QAAQ;AACZ;;AAEA;IACI,sBAAsB;IACtB,kBAAkB;AACtB",sourcesContent:["* {\n    margin: 0;\n    border: 0;\n    padding: 0;\n    box-sizing: border-box;\n    --purple-color: #c084fc;\n    --grey-color: #020617;\n    font-family: 'Roboto', sans-serif;\n}\n\n#container {\n    min-height: 100vh;\n    display: grid;\n    grid-template-rows: auto 1fr;\n    grid-template-rows: auto 1fr;\n}\n\n#main {\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n}\n\n#header {\n    background-color: var(--purple-color);\n    padding: 10px;\n    display: flex;\n    gap: 20px;\n    align-items: center;\n    font-size: 40px;\n    font-weight: 500;\n}\n\n#sidebar {\n    background-color: var(--grey-color);\n    padding: 10px;\n    padding-top: 15px;\n}\n\nul { \n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n}\n\nul > li {\n    list-style-type: none;\n    color: white;\n    font-size: 25px;\n}\n\nli > button {\n    background-color: var(--grey-color);\n    height: 60px;\n    width: 250px;\n    color: white;\n    font-size: 25px;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    cursor: pointer;\n    border-radius: 10px;\n}\n\nbutton:hover {\n    background-color: grey;\n}\n\nbutton > svg {\n    fill: white;\n    height: 50px;\n    width: 50px;\n}\n\n.projects-text {\n    margin-top: 70px;\n    margin-left: 10px;\n}\n\n.two {\n    display: flex;\n    gap: 120px;\n    align-items: center;\n}\n\n#add-project {\n    height: 40px;\n    width: 40px;\n    border-radius: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: var(--grey-color);\n}\n\n#add-project:hover {\n    background-color: grey;\n}\n\n#add-project > svg {\n    height: 30px;\n    width: 30px;\n}\n\nhr {\n    background: white;\n    height: 5px;\n    margin-bottom: 15px;\n}\n\ndialog[open] { \n    height: 250px;\n    width: 400px;\n    margin: auto;\n    border: 5px solid black;\n    padding: 20px;\n    border-radius: 10px;\n}\n\ndialog[open] form {\n    display: flex;\n    flex-direction: column;\n    gap: 25px;\n    align-items: center;\n}\n\ndialog[open] [id=\"project-name\"] {\n    height: 30px;\n    padding: 5px;\n    width: 290px;\n}\n\ndialog[open] #sub-btn {\n    background-color: green;\n    color: white;\n    height: 30px;\n    width: 290px;\n    border-radius: 3px;\n    padding: 5px;\n    border: 1px solid #166534;\n}\n\n\ndialog[open] #cancel-btn {\n    background-color: red;\n    color: white;\n    height: 30px;\n    width: 290px;\n    border-radius: 3px;\n    padding: 5px;\n}\n\n[data-lists] {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    margin: 10px;\n}\n\n[data-lists] > li {\n    list-style-type: none;\n    color: white;\n    font-size: 20px;\n}\n\n\n/* .list-name > button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height:30px;\n    width:30px;\n    border-radius: 50%;\n    font-size: 20px;\n} */\n.list-name {\n    position: relative;\n    display: flex;\n    align-items: center;\n}\n\n.list-name > span {\n    position: absolute;\n    font-size: 24px;\n    cursor: pointer;\n    right: 0;\n}\n\n.active-list {\n    background-color: grey;\n    border-radius: 3px;\n}"],sourceRoot:""}]);const a=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,A){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(i[s]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);r&&i[d[0]]||(void 0!==A&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=A),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),A="/*# ".concat(o," */");return[e].concat([A]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var A={},i=[],a=0;a<n.length;a++){var s=n[a],l=r.base?s[0]+r.base:s[0],d=A[l]||0,c="".concat(l," ").concat(d);A[l]=d+1;var p=t(c),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var g=o(u,r);r.byIndex=a,e.splice(a,0,{identifier:c,updater:g,references:1})}i.push(c)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var A=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<A.length;i++){var a=t(A[i]);e[a].references--}for(var s=r(n,o),l=0;l<A.length;l++){var d=t(A[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}A=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var A=t.sourceMap;A&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(A))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var A=e[r]={id:r,exports:{}};return n[r](A,A.exports,t),A.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),A=t(569),i=t.n(A),a=t(565),s=t.n(a),l=t(216),d=t.n(l),c=t(589),p=t.n(c),u=t(28),g={};g.styleTagTransform=p(),g.setAttributes=s(),g.insert=i().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d(),e()(u.Z,g),u.Z&&u.Z.locals&&u.Z.locals;const C=document.getElementById("add-project"),f=document.querySelector(".project-dialog"),m=document.getElementById("project-form"),I=document.getElementById("cancel-btn"),x=document.querySelector("[data-lists]"),h=document.getElementById("project-name"),B="tasks.lists",b="task.selectedListId";let v=JSON.parse(localStorage.getItem(B))||[],y=localStorage.getItem(b);function w(){localStorage.setItem(B,JSON.stringify(v)),localStorage.setItem(b,y),function(n){for(;n.firstChild;)n.removeChild(n.firstChild)}(x),v.forEach((n=>{const e=document.createElement("li");e.dataset.listId=n.id,e.classList.add("list-name"),e.innerText=n.name;var t=document.createElement("span");t.setAttribute("class","del-btn"),t.appendChild(document.createTextNode("x")),e.appendChild(t),n.id===y&&e.classList.add("active-list"),x.appendChild(e),t.addEventListener("click",(n=>{v=v.filter((n=>n.id!==t.parentNode.dataset.listId)),w()}))}))}function Y(n){return{id:Date.now().toString(),name:n,tasks:[]}}C.addEventListener("click",(()=>{f.showModal()})),f.addEventListener("click",(n=>{const e=f.getBoundingClientRect();(n.clientX<e.left||n.clientX>e.right||n.clientY<e.top||n.clientY>e.bottom)&&(m.reset(),f.close())})),m.addEventListener("submit",(n=>{n.preventDefault();const e=Y(h.value);v.push(e),w(),m.reset(),f.close()})),I.addEventListener("click",(()=>{m.reset(),f.close()})),Y(),w(),x.addEventListener("click",(n=>{"li"===n.target.tagName.toLowerCase()&&(y=n.target.dataset.listId,w())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,